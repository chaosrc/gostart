package github

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// IssuesURL github api
const IssuesURL = "https://api.github.com/search/issues"

// // IssuesResult 查询结果
// type IssuesResult struct {
// 	TotalCount int `json:total_count`
// 	Items *[]Item `json:items`
// }

// type Item struct {
// 	URL string `json:url`
// 	HTMLURL string `json:html_url`
// 	Title string `json:title`
// 	Number int
// 	Users *[]User
// }

// type User struct {

// }

// Generated by https://quicktype.io

type IssuesResult struct {
	TotalCount        int64  `json:"total_count"`
	IncompleteResults bool   `json:"incomplete_results"`
	Items             []Item `json:"items"`
}

type Item struct {
	URL           string      `json:"url"`
	RepositoryURL string      `json:"repository_url"`
	LabelsURL     string      `json:"labels_url"`
	CommentsURL   string      `json:"comments_url"`
	EventsURL     string      `json:"events_url"`
	HTMLURL       string      `json:"html_url"`
	ID            int64       `json:"id"`
	NodeID        string      `json:"node_id"`
	Number        int64       `json:"number"`
	Title         string      `json:"title"`
	User          User        `json:"user"`
	Labels        []Label     `json:"labels"`
	State         string      `json:"state"`
	Assignee      interface{} `json:"assignee"`
	Milestone     interface{} `json:"milestone"`
	Comments      int64       `json:"comments"`
	CreatedAt     time.Time   `json:"created_at"`
	UpdatedAt     time.Time   `json:"updated_at"`
	ClosedAt      interface{} `json:"closed_at"`
	PullRequest   PullRequest `json:"pull_request"`
	Body          string      `json:"body"`
	Score         float64     `json:"score"`
}

type Label struct {
	ID     int64  `json:"id"`
	NodeID string `json:"node_id"`
	URL    string `json:"url"`
	Name   string `json:"name"`
	Color  string `json:"color"`
}

type PullRequest struct {
	HTMLURL  interface{} `json:"html_url"`
	DiffURL  interface{} `json:"diff_url"`
	PatchURL interface{} `json:"patch_url"`
}

type User struct {
	Login             string `json:"login"`
	ID                int64  `json:"id"`
	NodeID            string `json:"node_id"`
	AvatarURL         string `json:"avatar_url"`
	GravatarID        string `json:"gravatar_id"`
	URL               string `json:"url"`
	HTMLURL           string `json:"html_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	OrganizationsURL  string `json:"organizations_url"`
	ReposURL          string `json:"repos_url"`
	EventsURL         string `json:"events_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	Type              string `json:"type"`
}

func SearchIssues(terms []string) (*IssuesResult, error) {
	q := url.QueryEscape(strings.Join(terms, " "))

	res, err := http.Get(IssuesURL + "?q=" + q)

	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	if res.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("search failed %s", res.Status)
	}
	var result IssuesResult

	if err := json.NewDecoder(res.Body).Decode(&result); err != nil {
		return nil, err
	}

	return &result, nil
}
